.wrapper {
	padding: 15px 20px;
	border: 1px dashed #ff6c60;
}

.left {
	width: 120px;
	border: 5px solid #ddd;
}

.right {
	margin-left: 20px;
	border: 5px solid #ddd;
}
/*下面的代码都是基于这套基本代码做覆盖，通过给容器添加不同的类来实现效果*/

/*双inline-block方案*/
.wrapper {
	box-sizing: content-box;
	font-size: 0;/*消除空格的影响*/
}

.wrapper .left,
.wrapper .right {
	display: inline-block;
	/*顶端对齐*/
	vertical-align: top;
	font-size: 14px;
	box-sizing: border-box;
}

.wrapper .right {
/*通过width: calc(100% - 140px)来动态计算右侧盒子的宽度
需要知道右侧盒子距离左边的距离，以及左侧盒子具体的宽度(content+padding+border)，以此计算父容器宽度的100%需要减去的数值。同时，
还需要知道右侧盒子的宽度是否包含border的宽度。*/
	width: calc(100% - 140px);
}


/*这种方法是通过width: calc(100% - 140px)来动态计算右侧盒子的宽度。需要知道右侧盒子距离左边的距离，以及左侧盒子具体的宽度(content+padding+border)，以此计算父容器宽度的100%需要减去的数值。同时，还需要知道右侧盒子的宽度是否包含border的宽度。
在这里，为了简单的计算右侧盒子准确的宽度，设置了子元素的box-sizing:border-box;以及父元素的box-sizing: content-box;。
同时，作为两个inline-block的盒子，必须设置vertical-align来使其顶端对齐。
另外，为了准确地应用计算出来的宽度，需要消除div之间的空格，需要通过设置父容器的font-size: 0;,或者用注释消除html中的空格等方法。
缺点:

需要知道左侧盒子的宽度，两个盒子的距离，还要设置各个元素的box-sizing

需要消除空格字符的影响

需要设置vertical-align: top满足顶端对齐。*/